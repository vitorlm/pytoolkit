import os
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from typing import Optional, Dict, Any, List

from utils.logging.logging_manager import LogManager


class ChartMixin:
    """
    Generic mixin for generating charts. It does not know anything about domain-specific data
    (e.g., criteria). It expects that the caller provides the data in the expected format.
    """

    _logger = None  # Can be overridden in subclasses

    @property
    def logger(self):
        """
        Returns the logger. If `_logger` is defined in the instance (or subclass),
        that logger is used. Otherwise, a default logger is created.
        """
        if self._logger is None:
            self._logger = LogManager.get_instance().get_logger("ChartMixin")
        return self._logger

    def _save_plot(
        self, plt_instance: Any, filename: str, adjust_params: Optional[Dict[str, Any]] = None
    ) -> None:
        """
        Saves the plot generated by the Matplotlib instance.

        Args:
            plt_instance (Any): The Matplotlib instance (e.g., plt or figure).
            filename (str): The name of the file to save the plot.
            adjust_params (Optional[Dict[str, Any]]): Parameters for layout adjustments
                using subplots_adjust.
        """
        output_path = getattr(self, "output_path", "")
        file_path = os.path.join(output_path, filename)

        if adjust_params:
            plt_instance.subplots_adjust(**adjust_params)

        plt_instance.savefig(file_path, dpi=600, bbox_inches="tight")

        self.logger.info(f"Plot saved to {file_path}")
        plt_instance.close()

    def plot_boxplot_chart(
        self,
        data: Dict[str, List[float]],
        title: Optional[str] = None,
        x_col: Optional[str] = None,
        y_col: Optional[str] = None,
        filename: str = "boxplot.png",
        box_colors: Optional[List[str]] = None,
    ) -> None:
        """
        Generates a generic boxplot comparing multiple series.

        Args:
            data (Dict[str, List[float]]): A dictionary mapping series names to lists of numbers.
            title (Optional[str]): The title of the plot.
            x_col (str): Column name for the x-axis (numerical values).
            y_col (str): Column name for the y-axis (categories).
            filename (str): The file name to save the plot.
            box_colors (Optional[List[str]]): List of colors to apply to each box.
        """
        self.logger.info("Generating generic boxplot.")

        series_labels = list(data.keys())
        series_data = list(data.values())

        fig, ax = plt.subplots(figsize=(10, 6))
        box = ax.boxplot(
            series_data,
            labels=series_labels,
            patch_artist=True,
            boxprops=dict(color="black"),
            medianprops=dict(color="orange", linewidth=2),
            whiskerprops=dict(color="black", linestyle="--"),
            capprops=dict(color="black"),
        )

        ax.set_title(title if title else "Boxplot", fontsize=16, fontweight="bold")
        ax.set_ylabel(y_col if y_col else "Values", fontsize=12)
        ax.set_xlabel(x_col if x_col else "Series", fontsize=12)
        ax.grid(True, linestyle="--", alpha=0.6)

        if box_colors:
            for patch, color in zip(box["boxes"], box_colors * len(series_labels)):
                patch.set_facecolor(color)

        self._save_plot(plt, filename)

    def plot_radar_chart(
        self,
        labels: List[str],
        data: Dict[str, List[float]],
        title: Optional[str] = None,
        filename: str = "radar_chart.png",
    ) -> None:
        """
        Generates a generic radar chart with one or more data series.

        Args:
            labels (List[str]): The labels for each axis.
            data (Dict[str, List[float]]): A dictionary mapping series names to lists of values.
                Each list must have the same length as `labels`.
            title (Optional[str]): The title of the radar chart.
            filename (str): The file name to save the plot.
        """
        self.logger.info("Generating generic radar chart.")

        num_vars = len(labels)
        angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
        angles += angles[:1]

        fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))
        max_value = 0

        for series_name, values in data.items():
            if not values:
                raise ValueError("Each series in data must have at least one set of values.")

            main_values = values + values[:1]
            max_value = max(max_value, max(main_values))
            ax.plot(angles, main_values, label=series_name, linewidth=2)
            ax.fill(angles, main_values, alpha=0.25)

        ax.set_thetagrids(np.degrees(angles[:-1]), labels, fontsize=12, weight="bold")
        ax.set_ylim(0, max_value * 1.1)
        ax.set_title(title, fontsize=16, weight="bold", pad=40)
        ax.grid(color="gray", linestyle="--", linewidth=0.5, alpha=0.7)
        ax.legend(loc="upper right", bbox_to_anchor=(1.1, 1.1))

        self._save_plot(
            plt,
            filename,
            adjust_params={"left": 0.1, "right": 0.9, "top": 0.9, "bottom": 0.1},
        )

    def plot_horizontal_bar_chart(
        self,
        df: pd.DataFrame,
        x_col: str,
        y_col: str,
        title: Optional[str] = None,
        filename: str = "horizontal_bar_chart.png",
        group_col: Optional[str] = None,
        group_colors: Optional[Dict[Any, str]] = None,
    ) -> None:
        """
        Generates a generic horizontal bar chart from a DataFrame.

        Args:
            df (pd.DataFrame): DataFrame containing the data to plot.
            x_col (str): Column name for the x-axis (numerical values).
            y_col (str): Column name for the y-axis (categories).
            title (Optional[str]): The title of the plot.
            filename (str): The file name to save the plot.
            group_col (Optional[str]): Name of the column that defines group membership.
            group_colors (Optional[Dict[Any, str]]): Mapping from group value to color.
        """
        self.logger.info("Generating generic horizontal bar chart.")

        df_sorted = df.sort_values(by=x_col, ascending=True)

        if group_col is not None:
            if group_colors is None:
                unique_groups = df_sorted[group_col].unique()
                cmap = plt.get_cmap("tab10")
                group_colors = {group: cmap(i % cmap.N) for i, group in enumerate(unique_groups)}
            colors = [group_colors.get(val, "skyblue") for val in df_sorted[group_col]]
        else:
            colors = "skyblue"

        plt.figure(figsize=(10, 6))
        plt.barh(df_sorted[y_col], df_sorted[x_col], color=colors)
        plt.xlabel(x_col)
        plt.ylabel(y_col)
        plt.title(title)
        plt.grid(axis="x", linestyle="--", alpha=0.7)
        self._save_plot(plt, filename)

    def plot_grouped_bar_chart(
        self,
        df: pd.DataFrame,
        x_col: str,
        series: List[str],
        series_labels: Optional[List[str]] = None,
        colors: Optional[List[str]] = None,
        title: Optional[str] = None,
        xlabel: Optional[str] = None,
        ylabel: Optional[str] = None,
        filename: str = "grouped_bar_chart.png",
        bar_width: float = 0.2,
    ) -> None:
        """
        Generates a generic grouped vertical bar chart from a DataFrame.

        Args:
            df (pd.DataFrame): DataFrame containing the data to plot.
            x_col (str): The column name for the x-axis (categories).
            series (List[str]): List of column names in df representing different series to plot as
                                bars.
            series_labels (Optional[List[str]]): Optional list of labels for each series.
                                                 If not provided, series names are used.
            colors (Optional[List[str]]): Optional list of colors for the bars. If not provided,
                                          defaults are used.
            title (Optional[str]): Title of the chart.
            xlabel (Optional[str]): Label for the x-axis.
            ylabel (Optional[str]): Label for the y-axis.
            filename (str): File name to save the chart.
            bar_width (float): Width of each bar.
        """
        self.logger.info("Generating generic grouped vertical bar chart.")
        # Get the x-axis categories.
        categories = df[x_col].tolist()
        x = np.arange(len(categories))
        n_series = len(series)

        # Use provided series labels or default to series names.
        if series_labels is None:
            series_labels = series

        # Generate default colors if not provided.
        if colors is None:
            cmap = plt.get_cmap("tab10")
            colors = [cmap(i % cmap.N) for i in range(n_series)]

        fig, ax = plt.subplots(figsize=(10, 6))

        # Calculate offsets so that the groups of bars are centered.
        for i, col in enumerate(series):
            offset = -((n_series - 1) / 2) * bar_width + i * bar_width
            ax.bar(x + offset, df[col], width=bar_width, label=series_labels[i], color=colors[i])

        ax.set_xlabel(xlabel if xlabel else x_col, fontsize=12)
        ax.set_ylabel(ylabel if ylabel else "Values", fontsize=12)
        ax.set_title(title if title else "Grouped Bar Chart", fontsize=16, weight="bold")
        ax.set_xticks(x)
        ax.set_xticklabels(categories, fontsize=10)
        ax.legend()
        ax.grid(True, axis="y", linestyle="--", alpha=0.6)

        self._save_plot(plt, filename)
